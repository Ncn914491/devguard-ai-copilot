// Mocks generated by Mockito 5.4.5 from annotations
// in devguard_ai_copilot/test/system_health_monitor_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:devguard_ai_copilot/core/database/models/audit_log.dart' as _i5;
import 'package:devguard_ai_copilot/core/database/services/audit_log_service.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [AuditLogService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuditLogService extends _i1.Mock implements _i2.AuditLogService {
  MockAuditLogService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<String> logAction({
    required String? actionType,
    required String? description,
    String? aiReasoning,
    Map<String, dynamic>? contextData,
    String? userId,
    bool? requiresApproval = false,
    String? approvedBy,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logAction,
          [],
          {
            #actionType: actionType,
            #description: description,
            #aiReasoning: aiReasoning,
            #contextData: contextData,
            #userId: userId,
            #requiresApproval: requiresApproval,
            #approvedBy: approvedBy,
          },
        ),
        returnValue: _i3.Future<String>.value(_i4.dummyValue<String>(
          this,
          Invocation.method(
            #logAction,
            [],
            {
              #actionType: actionType,
              #description: description,
              #aiReasoning: aiReasoning,
              #contextData: contextData,
              #userId: userId,
              #requiresApproval: requiresApproval,
              #approvedBy: approvedBy,
            },
          ),
        )),
      ) as _i3.Future<String>);

  @override
  _i3.Future<_i5.AuditLog?> getAuditLog(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getAuditLog,
          [id],
        ),
        returnValue: _i3.Future<_i5.AuditLog?>.value(),
      ) as _i3.Future<_i5.AuditLog?>);

  @override
  _i3.Future<List<_i5.AuditLog>> getAllAuditLogs() => (super.noSuchMethod(
        Invocation.method(
          #getAllAuditLogs,
          [],
        ),
        returnValue: _i3.Future<List<_i5.AuditLog>>.value(<_i5.AuditLog>[]),
      ) as _i3.Future<List<_i5.AuditLog>>);

  @override
  _i3.Future<List<_i5.AuditLog>> getAuditLogsByActionType(String? actionType) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAuditLogsByActionType,
          [actionType],
        ),
        returnValue: _i3.Future<List<_i5.AuditLog>>.value(<_i5.AuditLog>[]),
      ) as _i3.Future<List<_i5.AuditLog>>);

  @override
  _i3.Future<List<_i5.AuditLog>> getAuditLogsByUser(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAuditLogsByUser,
          [userId],
        ),
        returnValue: _i3.Future<List<_i5.AuditLog>>.value(<_i5.AuditLog>[]),
      ) as _i3.Future<List<_i5.AuditLog>>);

  @override
  _i3.Future<List<_i5.AuditLog>> getAuditLogsByDateRange(
    DateTime? startDate,
    DateTime? endDate,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAuditLogsByDateRange,
          [
            startDate,
            endDate,
          ],
        ),
        returnValue: _i3.Future<List<_i5.AuditLog>>.value(<_i5.AuditLog>[]),
      ) as _i3.Future<List<_i5.AuditLog>>);

  @override
  _i3.Future<List<_i5.AuditLog>> getLogsRequiringApproval() =>
      (super.noSuchMethod(
        Invocation.method(
          #getLogsRequiringApproval,
          [],
        ),
        returnValue: _i3.Future<List<_i5.AuditLog>>.value(<_i5.AuditLog>[]),
      ) as _i3.Future<List<_i5.AuditLog>>);

  @override
  _i3.Future<List<_i5.AuditLog>> getApprovedLogs() => (super.noSuchMethod(
        Invocation.method(
          #getApprovedLogs,
          [],
        ),
        returnValue: _i3.Future<List<_i5.AuditLog>>.value(<_i5.AuditLog>[]),
      ) as _i3.Future<List<_i5.AuditLog>>);

  @override
  _i3.Future<void> approveAction(
    String? auditLogId,
    String? approvedBy,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #approveAction,
          [
            auditLogId,
            approvedBy,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<List<_i5.AuditLog>> getAIActions() => (super.noSuchMethod(
        Invocation.method(
          #getAIActions,
          [],
        ),
        returnValue: _i3.Future<List<_i5.AuditLog>>.value(<_i5.AuditLog>[]),
      ) as _i3.Future<List<_i5.AuditLog>>);

  @override
  _i3.Future<List<_i5.AuditLog>> getCriticalActions() => (super.noSuchMethod(
        Invocation.method(
          #getCriticalActions,
          [],
        ),
        returnValue: _i3.Future<List<_i5.AuditLog>>.value(<_i5.AuditLog>[]),
      ) as _i3.Future<List<_i5.AuditLog>>);

  @override
  _i3.Future<List<_i5.AuditLog>> searchAuditLogs(String? searchTerm) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchAuditLogs,
          [searchTerm],
        ),
        returnValue: _i3.Future<List<_i5.AuditLog>>.value(<_i5.AuditLog>[]),
      ) as _i3.Future<List<_i5.AuditLog>>);

  @override
  _i3.Future<int> deleteOldAuditLogs(DateTime? cutoffDate) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteOldAuditLogs,
          [cutoffDate],
        ),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  _i3.Future<Map<String, int>> getAuditStatistics() => (super.noSuchMethod(
        Invocation.method(
          #getAuditStatistics,
          [],
        ),
        returnValue: _i3.Future<Map<String, int>>.value(<String, int>{}),
      ) as _i3.Future<Map<String, int>>);

  @override
  _i3.Future<void> initializeProjectAuditing(String? projectId) =>
      (super.noSuchMethod(
        Invocation.method(
          #initializeProjectAuditing,
          [projectId],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
