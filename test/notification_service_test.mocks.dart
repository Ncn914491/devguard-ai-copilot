// Mocks generated by Mockito 5.4.5 from annotations
// in devguard_ai_copilot/test/notification_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:devguard_ai_copilot/core/api/websocket_service.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [WebSocketService].
///
/// See the documentation for Mockito's code generation for more information.
class MockWebSocketService extends _i1.Mock implements _i2.WebSocketService {
  MockWebSocketService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isInitialized => (super.noSuchMethod(
        Invocation.getter(#isInitialized),
        returnValue: false,
      ) as bool);

  @override
  _i3.Stream<_i2.WebSocketEvent> get eventStream => (super.noSuchMethod(
        Invocation.getter(#eventStream),
        returnValue: _i3.Stream<_i2.WebSocketEvent>.empty(),
      ) as _i3.Stream<_i2.WebSocketEvent>);

  @override
  _i3.Stream<Map<String, dynamic>> get onTaskUpdate => (super.noSuchMethod(
        Invocation.getter(#onTaskUpdate),
        returnValue: _i3.Stream<Map<String, dynamic>>.empty(),
      ) as _i3.Stream<Map<String, dynamic>>);

  @override
  _i3.Future<void> initialize() => (super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<String> createConnection(
    String? userId, {
    String? authToken,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createConnection,
          [userId],
          {#authToken: authToken},
        ),
        returnValue: _i3.Future<String>.value(_i4.dummyValue<String>(
          this,
          Invocation.method(
            #createConnection,
            [userId],
            {#authToken: authToken},
          ),
        )),
      ) as _i3.Future<String>);

  @override
  _i3.Future<void> closeConnection(String? connectionId) => (super.noSuchMethod(
        Invocation.method(
          #closeConnection,
          [connectionId],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> joinRoom(
    String? connectionId,
    String? roomId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #joinRoom,
          [
            connectionId,
            roomId,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> leaveRoom(
    String? connectionId,
    String? roomId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #leaveRoom,
          [
            connectionId,
            roomId,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> broadcastTaskUpdate({
    required String? taskId,
    required Map<String, dynamic>? update,
    List<String>? targetUsers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #broadcastTaskUpdate,
          [],
          {
            #taskId: taskId,
            #update: update,
            #targetUsers: targetUsers,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> broadcastSecurityAlert({
    required String? alertId,
    required String? severity,
    required String? message,
    List<String>? affectedUsers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #broadcastSecurityAlert,
          [],
          {
            #alertId: alertId,
            #severity: severity,
            #message: message,
            #affectedUsers: affectedUsers,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> broadcastDeploymentStatus({
    required String? deploymentId,
    required String? status,
    String? message,
    Map<String, dynamic>? metadata,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #broadcastDeploymentStatus,
          [],
          {
            #deploymentId: deploymentId,
            #status: status,
            #message: message,
            #metadata: metadata,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> broadcastTeamMemberStatus({
    required String? userId,
    required String? status,
    Map<String, dynamic>? metadata,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #broadcastTeamMemberStatus,
          [],
          {
            #userId: userId,
            #status: status,
            #metadata: metadata,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> broadcastFileChange({
    required String? repositoryId,
    required String? filePath,
    required Map<String, dynamic>? change,
    List<String>? targetUsers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #broadcastFileChange,
          [],
          {
            #repositoryId: repositoryId,
            #filePath: filePath,
            #change: change,
            #targetUsers: targetUsers,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> broadcastFileLock({
    required String? repositoryId,
    required String? filePath,
    required Map<String, dynamic>? lock,
    List<String>? targetUsers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #broadcastFileLock,
          [],
          {
            #repositoryId: repositoryId,
            #filePath: filePath,
            #lock: lock,
            #targetUsers: targetUsers,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> broadcastConflictResolution({
    required String? repositoryId,
    required String? filePath,
    required Map<String, dynamic>? resolution,
    List<String>? targetUsers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #broadcastConflictResolution,
          [],
          {
            #repositoryId: repositoryId,
            #filePath: filePath,
            #resolution: resolution,
            #targetUsers: targetUsers,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> broadcastRepositoryUpdate({
    required String? repositoryId,
    required Map<String, dynamic>? update,
    List<String>? targetUsers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #broadcastRepositoryUpdate,
          [],
          {
            #repositoryId: repositoryId,
            #update: update,
            #targetUsers: targetUsers,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> handleHeartbeat(String? connectionId) => (super.noSuchMethod(
        Invocation.method(
          #handleHeartbeat,
          [connectionId],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  Map<String, dynamic> getConnectionStats() => (super.noSuchMethod(
        Invocation.method(
          #getConnectionStats,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  _i3.Future<void> updateUserPresence({
    required String? userId,
    required String? status,
    Map<String, dynamic>? metadata,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUserPresence,
          [],
          {
            #userId: userId,
            #status: status,
            #metadata: metadata,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  Map<String, dynamic> getOnlineUsers() => (super.noSuchMethod(
        Invocation.method(
          #getOnlineUsers,
          [],
        ),
        returnValue: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
